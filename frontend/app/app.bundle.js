"use strict";angular.module("phonecatApp",["ngAnimate","ngRoute","core","phoneDetail","phoneList"]),angular.module("core",["core.phone"]),angular.module("phoneDetail",["ngRoute","core.phone"]),angular.module("phoneList",["core.phone"]),angular.module("core.phone",["ngResource"]),angular.module("phonecatApp").config(["$locationProvider","$routeProvider",function(e,o){e.hashPrefix("!"),o.when("/phones",{template:"<phone-list></phone-list>"}).when("/phones/:phoneId",{template:"<phone-detail></phone-detail>"}).otherwise("/phones")}]),angular.module("phonecatApp").animation(".phone",function(){function e(e,o,n){if("selected"===o)return e.css({display:"block",position:"absolute",top:500,left:0}).animate({top:0},n),function(o){o&&e.stop()}}function o(e,o,n){if("selected"===o)return e.css({position:"absolute",top:0,left:0}).animate({top:-500},n),function(o){o&&e.stop()}}return{addClass:e,removeClass:o}}),angular.module("phoneDetail").component("phoneDetail",{templateUrl:"phone-detail/phone-detail.template.html",controller:["$routeParams","Phone",function(e,o){var n=this;n.phone=o.get({phoneId:e.phoneId},function(e){n.setImage(e.images[0])}),n.setImage=function(e){n.mainImageUrl=e},window.scrollTo(0,0)}]}),angular.module("phoneList").component("phoneList",{templateUrl:"phone-list/phone-list.template.html",controller:["Phone",function(e){this.phones=e.query(),this.orderProp="age"}]}),angular.module("core.phone").factory("Phone",["$resource",function(e){return e("http://localhost:1337/api/phones/:phoneId",{},{query:{method:"GET",params:{phoneId:"phones"},isArray:!0}})}]),angular.module("core").filter("checkmark",function(){return function(e){return e?"✓":"✘"}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
